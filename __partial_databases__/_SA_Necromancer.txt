\(BEGIN)
name = IsDetectedUndead
[CharDisplayStatus] = $SET_HOOK_PARAM( 7,$SA_PARAM_GET());
-$SET_HOOK_PARAM( 6,"");
-$RETURN 1;
\(END)

\(BEGIN)
name = IsEnervated
[CanCureOrWhatever] = $VAR time;
-$VAR exp;
-time = $GET_PARTY_TIME();
-exp = $GET_CHARACTER_SA($CharacterContext(),"IsEvervatedExp");
-$IF (time >=# exp)
-	{
-		$SA_REMOVE();
-		// code to restore original levels, HP and MaxHP
-	};
[TrainingCharacter] = $SA_REMOVE();
\(END)

\(BEGIN)
name = spell_AnimateDead
[InvokeSpellOnTarget] = $VAR tgt; // target
-tgt = $IndexOf($TargetContext());
-$SET_CHAR_STATiUS(tgt,5);
-$AddCombatant("Zombie","1");
[IsValidTarget] = $VAR tgt; // target
-$VAR stts; // target status
-tgt = $IndexOf($TargetContext());
-$IF ($IsUndead != ""){$RETURN "N";};
-stts = $GET_CHAR_STATUS(tgt);
-$IF (stts != 2 || stts != 9){$RETURN "N";};
\(END)

\(BEGIN)
name = spell_Contagion
[InvokeSpellOnTarget] = $VAR tgt; // target
-tgt = $IndexOf($TargetContext());
-$IF ($GET_CHAR_Lvl(tgt,"paladin") >=# 1){$RETURN;};
-$IF($GET_CHARACTER_SA($TargetContext(),"IsImmuneDisease") != "-?-?-"){$RETURN;};
-$SET_CHARACTER_SA($TargetContext(),"IsDiseased","Diseased");
\(END)

\(BEGIN)
name = spell_ChontrolUndead
[InvokeSpellOnTarget] = $VAR atk; // attacker
-$VAR tgt; // target
-$VAR cls;
-$VAR lvl;
-tgt = $IndexOf($TargetContext());
-atk = $IndexOf($AttackerContext());
-$IF ($IsUndead == ""){$RETURN;};};
-cls = $SA_PARAM_GET();
-lvl = $GET_CHAR_Lvl(atk,cls);
-$SetFriendly(tgt,$GET_COMBATANT_SA($Myself(),"side"));
-$SET_COMBATANT_SA($TargetContext(),"IsCharmed",lvl);
-$SET_CHARACTER_SA($TargetContext(),"DispelLevel",lvl);
\(END)

\(BEGIN)
name = spell_Detectundead
[InvokeSpellOnTarget] = $VAR tgt; // target
-$VAR name;
-$VAR monUn;
-tgt = $IndexOf($TargetContext());
-name = $GET_CHAR_NAME(tgt);
-monUn = $GET_CHAR_UNDEAD(tgt);
-$IF (monUn != ""){$SET_COMBATANT_SA($TargetContext(),"IsDetectedUndead",name);};
\(END)

\(BEGIN)
name = spell_Enervate
[InvokeSpellOnTarget] = $VAR atk; // attacker/spellcaster
-$VAR tgt; // tgt of draining
-$VAR bName; // name of baseclass
-$VAR bLvl; // level of baseclasses
-$VAR bDie; // type of die used for HP for baseclass
-$VAR bNum; // number of baseclasses in class
-$VAR name;
-$VAR monHit; // monster THAC0
-$VAR rand;
-$VAR drain; // amount of HP drained
-$VAR prevDrain; // previous Drains
-$VAR count;
-$VAR atkName;
-$VAR atkLvl;
-$IF ($IsUndead($TargetContext()) != ""){$RETURN;};
-atk = $IndexOf($AttackerContext());
-tgt = $IndexOf($TargetContext());
-atkName = $GetHighestLevelBaseclass(atk);
-atkLvl = $GetBaseclassLevel(atk,atkName);
-count = atkLvl /# 4;
-$WHILE (count ># 0)
-	{
-		bName = $GetHighestLevelBaseclass(tgt);
-		bLvl = $GetBaseclassLevel(tgt,bName);
-		name = $GET_CHAR_NAME(tgt);
-		$SET_CHAR_Lvl(tgt,bName,bLvl -# 1);
-		$IF ((bLvl -# 1) <=# 0)
-			{
-				$SET_CHAR_HITPOINTS(tgt,-11);
-				$SET_CHAR_MAXHITPOINTS(tgt,-11);
-				$SET_CHAR_STATUS(tgt,5); // status 5 = gone, PC cannot be raised or resurrected
-				$RETURN ;
-			};
-		bDie = $RollHitPointDice(bName,bLvl,bLvl); 
-		bNum = $DelimitedStringCount($GET_CHARACTER_SA($TargetContext(),"class_baseName"));
-		$IF (bNum <# 1){bNum = 1;};
-		rand = $RANDOM(bDie) +# 1;
-		drain = rand /# bNum;
-		$IF (drain <# 1){drain = 1;};
-		$SET_CHAR_MAXHITPOINTS(tgt,$GET_CHAR_MAXHITPOINTS(tgt) -# drain);
-		$IF ($GET_CHARACTER_SA($TargetContext(),"IsEnervated") == "-?-?-")
-			{
-				$SET_CHARACTER_SA($TargetContext(),"IsEnervated","#$" + bName + "$" + bLvl + "$" + drain + "#$99");
-			}
-		$ELSE
-			{
-				prevDrain = $GET_CHARACTER_SA($TargetContext(),"IsEnervated");
-				$SET_CHARACTER_SA($TargetContext(),"IsEnervated","#$" + bName + "$" + bLvl + "$" + drain + prevDrain);
-			};
-		$SET_CHAR_Exp(tgt,bName,$DAT_Baseclass_Experience(bName,bLvl -# 1));
-		count = count -# 1;
-	};
-$SET_CHARACTER_SA($TargetContext(),"IsEnervatedExp",$GET_PARTY_TIME() +# (atkLvl*#60) +# 60 *# ($RANDOM(4)+#1);
\(END)

\(BEGIN)
name = spell_HoldUndead
[InvokeSpellOnTarget] = $VAR atk; // attacker
-$VAR cls;
-$VAR adj;
-$VAR lvl;
-$VAR exp; // expiration time
-$IF ($GET_CHARACTER_SA($TargetContext(),"saved")){$RETURN;};
-$IF($GET_IsAUndead($TargetContext()) == ""){$RETURN;};
-atk = $IndexOf($AttackerContext());
-cls = $SA_PARAM_GET();
-adj = $GET_SPELL_SA($SpellContext(),"adjLevel");
-lvl = $GET_CHAR_Lvl(atk,cls) -# adj;
-exp = $GET_PARTY_TIME() +# (lvl +# $RANDOM(4) +# 1);
-$SET_COMBATANT_SA($TargetContext(),"IsHeld",exp);
\(END)

\(BEGIN)
name = spell_VampiricTouch
[ComputeSpellDamage] = $VAR atk; // attacker / caster
-$VAR tgt; // target
-$VAR name;
-$VAR cls;
$VAR lvl;
-$VAR count;
-$VAR hp;
-$VAR atkHp; // attacker's hit points
-$VAR atkMaxHp; // attacker's max hit point
-$VAR tempPool; // temporary hit point pool
-atk = $IndexOf($AttackerContext());
-tgt = $IndexOf($TargetContext());
-name = $GET_CHAR_NAME(tgt);
-cls = $SA_PARAM_GET();
-lvl = $GET_CHAR_Lvl(atk,cls);
-$IF (lvl ># 12){lvl ==# 12;};
-hp = 0;
-count = lvl /# 2;
-$WHILE (count ># 0)
-	{
-		hp = hp +# $RANDOM(6) +# $RANDOM(6) +# 2;
-		count = count -# 1;
-	};
-atkHp = $GET_CHAR_HITPOINTS(atk) +# hp;
-atkMaxHp = $GET_CHAR_MAXHITPOINT(atk);
-$IF(atkHp <# atkMaxHp)
-	{
-		$SET_CHAR_HITPOINTS(atk,atkHp);
-	}
-$ELSE
-	{
-		$SET_CHAR_HITPOINT(atk,atkMaxHp);
-		tempPool = $GET_CHARACTER_SA(atk,"TempHPPool");
-		$IF (tempPool == "-?-?-"){tempPool ==# 0;};
-		$SET_CHARACTER_SA($AttackerContext(),"TempHPPool",tempPool +# atkHp -# atkMaxHp);
-	};
-$RETURN hp;
\(END)

